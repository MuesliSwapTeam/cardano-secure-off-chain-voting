#include "templates/header.tmpl"
<script language="javascript">
Helios.setup();

ELECTION_PK = ElGamal.PublicKey.fromJSONObject($election_pk_json);

function load_election_and_ballots(election_id) {
    // BALLOTS by voter key
    ELECTION = null;
    ELECTION_ID = election_id;
    BALLOTS = {};
    BALLOTS_LOADED = {};
    VOTER_LIST = [];
    TRUSTEES = null;
    
    // get the election data
    Helios.get_election({'election_id' : election_id}, function(election_json) {
        var election = HELIOS.Election.fromJSONObject(election_json);        
        ELECTION = election;
        
        // get the trustees
        Helios.get_election_trustees({'election_id' : election_id}, function(trustees) {
            TRUSTEES= trustees;
            
            // get the voters
            Helios.get_election_voters({'election_id' : election_id}, function(voters) {
                VOTER_LIST = voters;
                \$(voters).each(function(v_num, v) {
                    // download each voter's data, stuffing into BALLOTS
                    Helios.get_election_voter({'election_id' : election_id, 'voter_id' : v.voter_id}, function(voter) {
                        BALLOTS[voter.voter_id] = HELIOS.EncryptedVote.fromJSONObject(voter.vote, ELECTION);
                        BALLOTS_LOADED[voter.voter_id] = true;
                    });
                });

                when_ready_verify_ballots_and_tally();
            });            
        })
    });
}

function when_ready_verify_ballots_and_tally() {
    var tally = verify_ballots_and_tally();
    
    if (!tally) {
        setTimeout('when_ready_verify_ballots_and_tally()', 2000);
    } else {
        // store the tally
        \$.post('/elections/$election.election_id/set_tally', {tally: jQuery.toJSON(tally)}, function(result) {
            if (result == "success") {
                alert('tally computed and uploaded');
                document.location = "./view"
            }
          });
    }
}

var NUM_VOTES = 0;

function increment_vote_tally_count() {
    NUM_VOTES += 1;
    \$('#num_votes').html(NUM_VOTES);
}

function verify_ballots_and_tally() {
    // check that ballots are here
    for (var i=0; i<VOTER_LIST.length; i++) {
        if (BALLOTS_LOADED[VOTER_LIST[i].voter_id] == null) {
            // not all ballots have been downloaded
            return false;
        }
    }
    
    // initialize the tallies
    var TALLY = [];
    \$(ELECTION.questions).each(function(qnum, q) {
        TALLY[qnum] = \$(q.answers).map(function(anum, a) {
            return 1;
        });
    });
    
    // voter hashes
    var voters = [];
    
    var VALID_P = true;
    
    // we need to keep track of the values of g^{voter_num} for decryption
    var DISCRETE_LOGS = {};
    var CURRENT_EXP = 0;
    var CURRENT_RESULT = BigInt.ONE;
    DISCRETE_LOGS[CURRENT_RESULT.toString()] = CURRENT_EXP;
    
    // all ballots are here
    \$(VOTER_LIST).each(function(vnum, voter) {
        var ballot = BALLOTS[voter.voter_id];
        
        // non-voter?
        if (ballot == null) {
            return;
        }
        
        // this ballot will count, so let's increment the discrete log pre-computation mapping.
        CURRENT_EXP += 1;
        CURRENT_RESULT = CURRENT_RESULT.multiply(ELECTION.pk.g).mod(ELECTION.pk.p);
        DISCRETE_LOGS[CURRENT_RESULT.toString()] = CURRENT_EXP;
        
        var voter_hash = ballot.get_hash();

        // verify the ballot
        var this_vote_result = ballot.verifyProofs(ELECTION.pk, function(answer_num, choice_num, result, choice) {
            if (choice_num != null) {
                // keep track of tally
                TALLY[answer_num][choice_num] = choice.multiply(TALLY[answer_num][choice_num]);
            }
        });
        
        VALID_P = VALID_P && this_vote_result;
        
        increment_vote_tally_count();
    });
    
    // are we okay?
    if (!VALID_P)
        return false;

    var result= [];
    
    // apply the decryption factors
    \$(TALLY).each(function(q_num, q_tally) {
        result[q_num] = [];
       \$(q_tally).each(function(choice_num, choice_tally) {
           var decryption_factors = [];
           \$(TRUSTEES).each(function(i, trustee) {
              decryption_factors.push(BigInt.fromJSONObject(trustee.decryption_factors[q_num][choice_num]));
           });
           
           // apply the keyshares decryption factors
           var one_choice_result = choice_tally.decrypt(decryption_factors);
           
           result[q_num][choice_num] = DISCRETE_LOGS[one_choice_result.getM().toString()];
       });
    });
    
    return {'result': result, 'result_proof' : null};
}

function do_tally() {
    load_election_and_ballots('$election.election_id');
}
</script>

<h2 class="title">$election.name &mdash; Trustee Tallying <span style="font-size:0.7em;">[<a href="./view">done</a>]</span></h2>

<ul>
#set $ready_p=True
#for $keyshare in $keyshares
<li> <tt>$keyshare.email</tt> &mdash;
#if $keyshare.get_decryption_factors()
decryption factors submitted
#else
#set $ready_p=False
waiting for decryption factors
#end if    
</li>
#end for
</ul>

#if $ready_p
Ready to combine decryption factors and compute tally.<br /><br />
<p align="center" style="font-size:16pt;">
    <span id="num_votes">0</span> tallied.
</p>
<button onclick="do_tally(); return false;">Compute Tally</button>
#else
Not ready for tallying.
#end if

#include "templates/footer.tmpl"
